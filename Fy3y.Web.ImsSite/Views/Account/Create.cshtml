@model Fy3y.Model.Das.Account
@{
  ViewBag.Title = "创建账户";
}
@using (Html.BeginForm(null, null, FormMethod.Post, new {id = "form1"}))
{
@Html.AntiForgeryToken()
@Html.ValidationSummary(true, "", new {@class = "text-danger"})
<div class="form-group">
  <label class="col-md-2 control-label">员工姓名</label>
  <div class="col-md-10">
    @Html.DropDownList("employeeid", null, new {@class = "form-control"})
  </div>
</div>
<div class="form-group">
  <label class="col-md-2 control-label">用户账号</label>
  <div class="col-md-10">
    @Html.TextBoxFor(model => model.UserId, new {@class = "form-control"})
  </div>
</div>
<div class="form-group">
  <label class="col-md-2 control-label">用户角色</label>
  <div class="col-md-10">
    @Html.RadioButtonFor(model => model.Role, 1)
    <label>普通用户</label>
    @Html.RadioButtonFor(model => model.Role, 10)
    <label>高级用户</label>
  </div>
</div>
@Html.HiddenFor(m => m.CreateTime)
@Html.HiddenFor(m => m.Modules)
@Html.HiddenFor(m => m.IsValid)
}
<div class="text-center">
  <button class="btn btn-dark" id="submit">保存</button>
</div>
<div>
  @Html.ActionLink("返回", "Index")
</div>
<script type="text/javascript">
  $("#UserId").val('10' + $("#employeeid").val());
  $("#employeeid").change(function() {
    $("#UserId").val('10' + $("#employeeid").val());
  });

  function validForm() {
    return $("#form1").validate({
      rules: {
        UserId: {
          required: true
        }
      }
    });
  }

  //注册表单验证
  $(validForm());
  //点击表单保存按钮触发单击事件，进行表单验证，验证通过发起ajax请求，验证不通过在表单里提示
  $("#submit").click(function() {
    if (validForm().form()) {
      var url = "@Url.Action("Create")";
      var data = $("#form1").serialize();
      AjaxSubmit(url, data);
    }
  });
</script>